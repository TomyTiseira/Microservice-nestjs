pr:
  branches:
    include:
      - develop
trigger: none

stages:

# Stage 0: Detección de cambios
- stage: DetectarCambios
  displayName: "Detectar Cambios en Microservicios"
  jobs:
    - job: DetectarCambiosJob
      displayName: "Detectar Cambios"
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
          fetchDepth: 2  # Solo necesitamos el commit actual y el anterior
        - script: |
            # Para PRs, comparamos con la rama objetivo
            if [ -n "$SYSTEM_PULLREQUEST_TARGETBRANCH" ]; then
              BASE=$(git rev-parse origin/$SYSTEM_PULLREQUEST_TARGETBRANCH)
              CHANGED_FILES=$(git diff --name-only $BASE HEAD)
            else
              # Para ejecuciones normales (no PR)
              CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
            fi
            
            echo "Archivos modificados: $CHANGED_FILES"

            # Inicializar variables de cambios
            echo "##vso[task.setvariable variable=auth_changed;]false"
            echo "##vso[task.setvariable variable=orders_changed;]false"
            echo "##vso[task.setvariable variable=payments_changed;]false"

            # Verificar cambios
            if echo "$CHANGED_FILES" | grep -q '^auth/'; then
              echo "##vso[task.setvariable variable=auth_changed;]true"
            fi
            if echo "$CHANGED_FILES" | grep -q '^orders/'; then
              echo "##vso[task.setvariable variable=orders_changed;]true"
            fi
            if echo "$CHANGED_FILES" | grep -q '^payments/'; then
              echo "##vso[task.setvariable variable=payments_changed;]true"
            fi
            
            echo "auth_changed: $(auth_changed)"
            echo "orders_changed: $(orders_changed)"
            echo "payments_changed: $(payments_changed)"
          displayName: "Detectar microservicios modificados"
          env:
            SYSTEM_PULLREQUEST_TARGETBRANCH: $(System.PullRequest.TargetBranch)

# Stage 1: Análisis del Código (ESLint)
- stage: AnalisisCodigo
  displayName: "Análisis de Código con ESLint"
  dependsOn: DetectarCambios
  jobs:
    - job: ESLint_Auth
      displayName: "ESLint - Auth"
      condition: eq(variables['auth_changed'], 'true')
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            cd auth
            npm install
            npm run lint
          displayName: "Ejecutar ESLint en Auth"

    - job: ESLint_Orders
      displayName: "ESLint - Orders"
      condition: eq(variables['orders_changed'], 'true')
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            cd orders
            npm install
            npm run lint
          displayName: "Ejecutar ESLint en Orders"

    - job: ESLint_Payments
      displayName: "ESLint - Payments"
      condition: eq(variables['payments_changed'], 'true')
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            cd payments
            npm install
            npm run lint
          displayName: "Ejecutar ESLint en Payments"

# Stage 2: Build (Compilar aplicaciones)
- stage: Construccion
  displayName: "Construcción de Microservicios"
  dependsOn: AnalisisCodigo
  jobs:
    - job: Build_Auth
      displayName: "Build - Auth"
      condition: eq(variables['auth_changed'], 'true')
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            cd auth
            npm install
            npm run build
          displayName: "Construir Auth"

    - job: Build_Orders
      displayName: "Build - Orders"
      condition: eq(variables['orders_changed'], 'true')
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            cd orders
            npm install
            npm run build
          displayName: "Construir Orders"

    - job: Build_Payments
      displayName: "Build - Payments"
      condition: eq(variables['payments_changed'], 'true')
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - checkout: self
        - script: |
            cd payments
            npm install
            npm run build
          displayName: "Construir Payments"
