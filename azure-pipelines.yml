pr:
  branches:
    include:
      - develop  # Solo se activa para PRs hacia develop

trigger: none  # No trigger autom√°tico en push (solo PR)

stages:
  # --- STAGE 1: Detecci√≥n de cambios (optimizado para microservicios) ---
  - stage: DetectChanges
    displayName: "üîç Detectar cambios"
    jobs:
      - job: DetectChangesJob
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
            fetchDepth: 2  # Solo necesitamos el commit actual y el anterior

          - script: |
              # Usamos variables de Azure para PRs
              if [ -n "$SYSTEM_PULLREQUEST_TARGETBRANCH" ]; then
                BASE=$(git rev-parse origin/$SYSTEM_PULLREQUEST_TARGETBRANCH)
                CHANGED_FILES=$(git diff --name-only $BASE HEAD)
              else
                CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
              fi

              echo "=== Archivos modificados ==="
              echo "$CHANGED_FILES"

              # Seteamos variables por microservicio
              echo "##vso[task.setvariable variable=run_lint;output=true]false"
              echo "##vso[task.setvariable variable=run_test;output=true]false"
              echo "##vso[task.setvariable variable=run_build;output=true]false"

              # Detectamos cambios en cada microservicio
              MICROSERVICES=("auth" "orders" "payments" "shared")  # Agrega los tuyos
              for ms in "${MICROSERVICES[@]}"; do
                if echo "$CHANGED_FILES" | grep -q "^$ms/"; then
                  echo "##vso[task.setvariable variable=run_${ms};output=true]true"
                  echo "##vso[task.setvariable variable=run_lint;output=true]true"
                  echo "##vso[task.setvariable variable=run_test;output=true]true"
                  echo "##vso[task.setvariable variable=run_build;output=true]true"
                fi
              done
            env:
              SYSTEM_PULLREQUEST_TARGETBRANCH: $(System.PullRequest.TargetBranch)
            displayName: "Determinar microservicios afectados"

  # --- STAGE 2: Instalaci√≥n de dependencias ---
  - stage: InstallDependencies
    displayName: "üì¶ Instalar dependencias"
    dependsOn: DetectChanges
    jobs:
      - job: InstallDeps
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - script: |
              if [ "$RUN_LINT" == "true" ] || [ "$RUN_TEST" == "true" ] || [ "$RUN_BUILD" == "true" ]; then
                npm ci  # Instalaci√≥n limpia de dependencias
              else
                echo "No hay cambios que requieran instalaci√≥n de dependencias."
              fi
            displayName: "Instalar dependencias globales"

  # --- STAGE 3: Linting y Formatting ---
  - stage: Lint
    displayName: "üßπ Linting"
    dependsOn: InstallDependencies
    condition: eq(variables['run_lint'], 'true')
    jobs:
      - job: LintAll
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - script: |
              MICROSERVICES=("auth" "orders" "payments")
              for ms in "${MICROSERVICES[@]}"; do
                if [ "$(run_${ms})" == "true" ]; then
                  echo "=== Linting $ms ==="
                  cd $ms
                  npm run lint
                  cd ..
                fi
              done
            displayName: "Ejecutar ESLint"

  # --- STAGE 4: Pruebas Unitarias ---
  - stage: Test
    displayName: "üß™ Pruebas unitarias"
    dependsOn: Lint
    condition: eq(variables['run_test'], 'true')
    jobs:
      - job: TestAll
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - script: |
              MICROSERVICES=("auth" "orders" "payments")
              for ms in "${MICROSERVICES[@]}"; do
                if [ "$(run_${ms})" == "true" ]; then
                  echo "=== Testing $ms ==="
                  cd $ms
                  npm test
                  cd ..
                fi
              done
            displayName: "Ejecutar pruebas"

  # --- STAGE 5: Build ---
  - stage: Build
    displayName: "üèóÔ∏è Build"
    dependsOn: Test
    condition: eq(variables['run_build'], 'true')
    jobs:
      - job: BuildAll
        pool: 
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          - script: |
              MICROSERVICES=("auth" "orders" "payments")
              for ms in "${MICROSERVICES[@]}"; do
                if [ "$(run_${ms})" == "true" ]; then
                  echo "=== Building $ms ==="
                  cd $ms
                  npm run build
                  cd ..
                fi
              done
            displayName: "Compilar microservicios"